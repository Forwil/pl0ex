!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY	name.h	27;"	d
BECOME	name.h	64;"	d
BEGIN	name.h	28;"	d
BIG	name.h	69;"	d
BIGE	name.h	70;"	d
CHAR	name.h	29;"	d
COLON	name.h	59;"	d
COMMA	name.h	56;"	d
CONST	name.h	30;"	d
DIV	name.h	55;"	d
DO	name.h	31;"	d
DOWNTO	name.h	32;"	d
ELSE	name.h	33;"	d
END	name.h	34;"	d
EQ	name.h	65;"	d
FOR	name.h	35;"	d
FUNC	name.h	36;"	d
INT	name.h	37;"	d
LBP	name.h	61;"	d
LP	name.h	63;"	d
MAXLINE	name.h	19;"	d
MAXSYM	name.h	20;"	d
MINUS	name.h	53;"	d
MULT	name.h	54;"	d
NALPHABET	name.h	18;"	d
NEQ	name.h	66;"	d
OF	name.h	38;"	d
OUTPUT	lexer.c	/^char *OUTPUT[]=$/;"	v
PERIOD	name.h	57;"	d
PLUS	name.h	52;"	d
PROC	name.h	39;"	d
RBP	name.h	60;"	d
READ	name.h	40;"	d
REPEAT	name.h	41;"	d
RP	name.h	62;"	d
SEM	name.h	58;"	d
SMO	name.h	67;"	d
SMOE	name.h	68;"	d
THEN	name.h	42;"	d
TO	name.h	43;"	d
T_CHAR	name.h	77;"	d
T_CONST	name.h	76;"	d
T_IDENT	name.h	75;"	d
T_STRING	name.h	78;"	d
UNTIL	name.h	44;"	d
VAR	name.h	45;"	d
WHILE	name.h	46;"	d
WRITE	name.h	47;"	d
alphabet	lexer.c	/^char *alphabet[] = $/;"	v
c2i	name.h	21;"	d
ch	lexer.c	/^char ch;$/;"	v
fin	lexer.c	/^FILE *fin,*fout;$/;"	v
fout	lexer.c	/^FILE *fin,*fout;$/;"	v
getch	lexer.c	/^void getch()$/;"	f
getsym	lexer.c	/^int getsym()$/;"	f
init	lexer.c	/^void init()$/;"	f
integer	test.pas	/^function integer of procedure$/;"	f
iss	name.h	22;"	d
line	lexer.c	/^char line[MAXLINE],sym[MAXSYM];$/;"	v
linelen	lexer.c	/^int linelen,linep,symtype,num,t;$/;"	v
linep	lexer.c	/^int linelen,linep,symtype,num,t;$/;"	v
main	lexer.c	/^int main(void)$/;"	f
main	test.c	/^main ( int argc, char *argv[] )$/;"	f
mod	text.pas	/^function mod(var fArg1,fArg2:integer):integer;$/;"	f
num	lexer.c	/^int linelen,linep,symtype,num,t;$/;"	v
searchident	lexer.c	/^int searchident()$/;"	f
swap	text.pas	/^procedure swap;$/;"	p
sym	lexer.c	/^char line[MAXLINE],sym[MAXSYM];$/;"	v
symnumber	lexer.c	/^int symnumber[255];$/;"	v
symtype	lexer.c	/^int linelen,linep,symtype,num,t;$/;"	v
t	lexer.c	/^int linelen,linep,symtype,num,t;$/;"	v
